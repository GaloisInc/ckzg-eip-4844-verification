/**
 * The module contains functions that perform BLS operations.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bls12-381-helpers
 */
module Spec::BlsHelpers where

import Common::ModArith
import Common::Utils
import Spec::BlsEC::Curve
import Spec::BlsEC::Field
import Spec::BlsEC::G1
import Spec::BlsEC::GP
import Spec::BlsSerde

/**
 * BLS field elements are 256-bits long.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#custom-types
 */
type BlsFieldSize = 256
type BlsFieldElement = [BlsFieldSize]

/**
 * Compute the modular inverse of x
 *  i.e. return y such that x * y % BLS_MODULUS == 1
 * Precondition: x != 0 BLS_MODULUS
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bls_modular_inverse
 * NOTE: Cryptol can not perform exponentiation with negative exponents,
 *  we cannot just execute `x^^(-1) % BLS_MODULUS` like the Python spec does.
 * ```repl
 * :check bls_modular_inverse 1 == 1
 * :check bls_modular_inverse 2 == 0x39f6d3a994cebea4199cec0404d0ec02a9ded2017fff2dff7fffffff80000001
 * :check bls_modular_inverse 3 == 0x4d491a377113a8daccd13ab0066be558e27e6d5755543d54aaaaaaaa00000001
 * ```
 * NOTE: we just chose the values at "random." Checked against: https://planetcalc.com/3298/.
 */
bls_modular_inverse : BlsFieldElement -> BlsFieldElement
bls_modular_inverse x = toIntegral (modular_inverse x') where
    x' = fromIntegral`{BLS_MODULUS} x

/**
 * Divide two field elements: x by y
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#div
 * ```repl
 * :check bls_div 1 2 == 0x39f6d3a994cebea4199cec0404d0ec02a9ded2017fff2dff7fffffff80000001
 * :check bls_div 13 1 == 13
 * :check bls_div 57 13 == 0x1ac0b075a72457fcf8210a7802390a776218122813b0da27276276272762762c
 * ```
 * NOTE: we just chose the last value at "random"
 */
bls_div : BlsFieldElement -> BlsFieldElement -> BlsFieldElement
bls_div x y = toIntegral (div_mod x' y') where
    x' = fromIntegral`{BLS_MODULUS} x
    y' = fromIntegral`{BLS_MODULUS} y

/**
 * Return x to power of [0, n-1].
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_powers
 * ```repl
 * let expected_powers = [1, 3, 3^^2, 3^^3, 3^^4, 3^^5, 3^^6, ((3^^7):BlsFieldElement)]
 * :check compute_powers`{8} 3 == expected_powers
 * :check compute_powers`{0} 3 == []
 * :check compute_powers`{1} 7 == [1:BlsFieldElement]
 * :check compute_powers`{2} 7 == [1:BlsFieldElement, 7]
 * ```
 */
compute_powers : {n} (fin n, width n <= 64) => BlsFieldElement -> [n]BlsFieldElement
compute_powers x
    | n == 0 => []
    | n == 1 => [1]
    | n == 2 => [1, x]
    | n > 2 => powers where
        x' = fromIntegral`{BLS_MODULUS} x
        powers' = [1] # [(powers'@i) * x' | i <- [0 .. n-2]]
        powers = map toIntegral powers'

/**
 * Performs a multi-scalar multiplication between G1 `points` and `scalars`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#multi_exp
 * For the actual implementation,
 *   @see https://github.com/ethereum/consensus-specs/blob/85e2452301382a9d099df16f38deac8178355358/tests/core/pyspec/eth2spec/utils/bls.py#L262
 * NOTE: the Python multi_exp handles both G1 and G2 points, and just calls their
 *  corresponding `add` and `multiply` functions. This implementation is for G1 points only.
 * ```repl
 * :check g1_multi_exp`{1} [G1] [1] == G1
 * :check g1_multi_exp`{2} [G1, G1] [2, 3] == G1_5P
 * :check g1_multi_exp`{2} [G1_3P, G1_2P] [1, 2] == G1_7P
 * :check g1_multi_exp`{3} [G1_4P, G1_2P, G1_3P] [2, 3, 5] == g1_multi_exp`{2} [G1_5P, G1_7P] [3, 2]
 * ```
 */
g1_multi_exp : {len} (fin len, len >= 1) => [len]G1Point -> [len]UInt256 -> G1Point
g1_multi_exp points scalars = results!0 where
    results = [G1_INFINITY] # [g1_add r (g1_multi_optimized p s) | r <- results | p <- points | s <- scalars]

/**
 * Deserialize the G1 bytes into a G1 point
 * @see https://github.com/ethereum/consensus-specs/blob/dcdcf25d8152cd078a9888eeddda4a550e1de009/tests/core/pyspec/eth2spec/utils/bls.py#L337
 * ```repl
 * :check bytes48_to_G1 G1_POINT_AT_INFINITY == G1_INFINITY
 * :check bytes48_to_G1 G1_2P_COMPRESSED == G1_2P
 * :check bytes48_to_G1 G1_7P_COMPRESSED == G1_7P
 * ```
 * NOTE: We're not testing any of the invalid points since they throw runtime errors,
 *  and Cryptol does not have a way to expect that. One can manually test to verify
 *  these errors are thrown.
 */
bytes48_to_G1 : Bytes48 -> G1Point
bytes48_to_G1 bytes = decompress_G1 bytes

/**
 * Serialize the G1 point into G1 bytes
 * @see https://github.com/ethereum/consensus-specs/blob/dcdcf25d8152cd078a9888eeddda4a550e1de009/tests/core/pyspec/eth2spec/utils/bls.py#L315
 * ```repl
 * :check g1_to_bytes48 G1_INFINITY == G1_POINT_AT_INFINITY
 * :check g1_to_bytes48 G1_2P == G1_2P_COMPRESSED
 * :check g1_to_bytes48 G1_7P == G1_7P_COMPRESSED
 * ```
 */
g1_to_bytes48 : G1Point -> Bytes48
g1_to_bytes48 point = compress_G1 point

/**
 * Deserialize the G2 bytes into a G2 point
 * @see https://github.com/ethereum/consensus-specs/blob/dcdcf25d8152cd078a9888eeddda4a550e1de009/tests/core/pyspec/eth2spec/utils/bls.py#L337
 * ```repl
 * :check bytes96_to_G2 G2_POINT_AT_INFINITY == G2_INFINITY
 * :check bytes96_to_G2 G2_2P_COMPRESSED == G2_2P
 * :check bytes96_to_G2 G2_3P_COMPRESSED == G2_3P
 * ```
 * NOTE: We're not testing any of the invalid points since they throw runtime errors,
 *  and Cryptol does not have a way to expect that. One can manually test to verify
 *  these errors are thrown.
 */
bytes96_to_G2 : Bytes96 -> G2Point
bytes96_to_G2 bytes = decompress_G2 bytes

/**
 * Serialize the G2 point into G2 bytes
 * @see https://github.com/ethereum/consensus-specs/blob/dcdcf25d8152cd078a9888eeddda4a550e1de009/tests/core/pyspec/eth2spec/utils/bls.py#L315
 * ```repl
 * :check g2_to_bytes96 G2_INFINITY == G2_POINT_AT_INFINITY
 * :check g2_to_bytes96 G2_2P == G2_2P_COMPRESSED
 * :check g2_to_bytes96 G2_3P == G2_3P_COMPRESSED
 * ```
 */
g2_to_bytes96 : G2Point -> Bytes96
g2_to_bytes96 point = compress_G2 point

/**
 * A KZG commitment is just a G1 point
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#custom-types
 */
type KZGCommitment = Bytes48

/**
 * BLS multiscalar multiplication in G1. This can be naively implemented using double-and-add.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#g1_lincomb
 * NOTE: we don't need to check for non-equal lengths for `points` and `scalars`,
 *  because our type parameter `n` enforces that for us.
 * NOTE: the `points` being passed in are compressed G1 points.
 * ```repl
 * :check g1_lincomb [] [] == G1_POINT_AT_INFINITY
 * :check g1_lincomb`{1} [G1_1P_COMPRESSED] [1] == G1_1P_COMPRESSED
 * :check g1_lincomb`{2} [G1_1P_COMPRESSED, G1_1P_COMPRESSED] [2, 5] == G1_7P_COMPRESSED
 * :check g1_lincomb`{3} [G1_2P_COMPRESSED, G1_2P_COMPRESSED, G1_1P_COMPRESSED] [1, 1, 3] == G1_7P_COMPRESSED
 * :check g1_lincomb`{3} [G1_3P_COMPRESSED, G1_2P_COMPRESSED, G1_1P_COMPRESSED] [1, 2, 0] == G1_7P_COMPRESSED
 * ```
 */
g1_lincomb : {n} (fin n) => [n]KZGCommitment -> [n]BlsFieldElement -> KZGCommitment
g1_lincomb points scalars
    | n == 0 => G1_POINT_AT_INFINITY
    | n > 0 => g1_to_bytes48 result where
        points_g1 = [bytes48_to_G1 point | point <- points]
        result = g1_multi_exp`{n} points_g1 scalars

/**
 * BLS Primitive root of unity.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#constants
 */
PRIMITIVE_ROOT_OF_UNITY : Z BLS_MODULUS
PRIMITIVE_ROOT_OF_UNITY = 7

/**
 * Compute the roots of unity for the `order`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_roots_of_unity
 * Precondition: `(BLS_MODULUS - 1) % order == 0`
 * Assertion: `order == n`
 */
compute_roots_of_unity : {n} (fin n, width n <= 64) => UInt64 -> [n]BlsFieldElement
compute_roots_of_unity order = assert (order == `n) "order must be equal to n" result where
        order' = toInteger order
        root_of_unity = pow_mod PRIMITIVE_ROOT_OF_UNITY ((`(BLS_MODULUS) - 1) / order')
        root_of_unity' = toIntegral root_of_unity
        result = compute_powers`{n} root_of_unity'

/**
 * Bytes used to encode a commitment.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#constants
 */
type BYTES_PER_COMMITMENT = 48

/**
 * Bytes used to encode a proof.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#constants
 */
type BYTES_PER_PROOF = 48

/**
 * Bytes used to encode a BLS scalar field element.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#constants
 */
type BYTES_PER_FIELD_ELEMENT = 32

/**
 * The bytes of a BLS scalar field element.
 */
type Bytes32 = [BYTES_PER_FIELD_ELEMENT][8]

/**
 * Convert untrusted bytes to a trusted and validated BLS scalar field element.
 * This function does not accept inputs greater than the BLS modulus.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bytes_to_bls_field
 * ```repl
 * let bytes = [0x73,0xed,0xa7,0x53,0x29,0x9d,0x7d,0x48,0x33,0x39,0xd8,0x08,0x09,0xa1,0xd8,0x05,0x53,0xbd,0xa4,0x02,0xff,0xfe,0x5b,0xfe,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00]
 * let field_element = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
 * :check bytes_to_bls_field bytes == field_element
 * ```
 */
bytes_to_bls_field : Bytes32 -> BlsFieldElement
bytes_to_bls_field bytes = assert (field_element < `(BLS_MODULUS)) error_msg field_element where
    field_element = join bytes // Crytol is big endian
    error_msg = "BLS scalar field element must be less than modulus"

/**
 * Convert a BLS scalar field element to bytes.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bls_field_to_bytes
 */
bls_field_to_bytes : BlsFieldElement -> Bytes32 
bls_field_to_bytes value = groupBy`{8} value

/**
 * Perform BLS validation required by the types `KZGProof` and `KZGCommitment`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#validate_kzg_g1
 * ```repl
 * :check validate_kzg_g1 G1_1P_COMPRESSED
 * // :error key_validate G1_INVALID_POINT_COMPRESSED // Cryptol cannot currently do this
 * ```
 * NOTE: I have manually checked that calling `key_validate` on an invalid compressed point
 *  fails with an error thrown. Unfortunately, there is not a way in the Cryptol REPL to
 *  say that I expect an error to be thrown.
 * NOTE: this repl test is slow (couple of seconds).
 */
validate_kzg_g1 : Bytes48 -> Bit
validate_kzg_g1 b =
    if b == G1_POINT_AT_INFINITY then True
    else key_validate b

/**
 * Convert untrusted bytes into a trusted and validated `KZGCommitment`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bytes_to_kzg_commitment
 * ```repl
 * :check (bytes_to_kzg_commitment G1_1P_COMPRESSED) == G1_1P_COMPRESSED
 * ```
 * NOTE: this repl test is slow (couple of seconds).
 */
bytes_to_kzg_commitment : Bytes48 -> KZGCommitment
bytes_to_kzg_commitment b =
    assert (validate_kzg_g1 b) "validate_kzg_g1 failed" b

/**
 * Same as for `KZGCommitment`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#custom-types
 */
type KZGProof = Bytes48

/**
 * Convert untrusted bytes into a trusted and validated `KZGProof`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bytes_to_kzg_proof
  * ```repl
 * :check (bytes_to_kzg_proof G1_1P_COMPRESSED) == G1_1P_COMPRESSED
 * ```
 * NOTE: this repl test is slow (couple of seconds).
 */
bytes_to_kzg_proof : Bytes48 -> KZGProof
bytes_to_kzg_proof b =
    assert (validate_kzg_g1 b) "validate_kzg_g1 failed" b

/*
 * ===============
 * Unit test suite
 * ===============
 */

/**
 * Unit tests for `g1_lincomb`.
 * ```repl
 * :check test_compute_roots_of_unity
 * ```
 */
test_compute_roots_of_unity : Bit
property test_compute_roots_of_unity =
    compute_roots_of_unity`{4} 4 == expected_roots where
    expected_roots =
        [ 0x0000000000000000000000000000000000000000000000000000000000000001
        , 0x00000000000000008d51ccce760304d0ec030002760300000001000000000000
        , 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000000
        , 0x73eda753299d7d47a5e80b39939ed33467baa40089fb5bfefffeffff00000001
        ]


/**
 * Hash `data` and convert the output to a BLS scalar field element.
 * The output is not uniform over the BLS field.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#hash_to_bls_field
 * Temporarily set to always return 0
 */
hash_to_bls_field: {n} (fin n, n >= 1) => [n][8] -> BlsFieldElement
hash_to_bls_field data = 0

/**
 * The two constants FIAT_SHAMIR_PROTOCOL_DOMAIN and RANDOM_CHALLENGE_KZG_BATCH_DOMAIN
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#blob
 */
FIAT_SHAMIR_PROTOCOL_DOMAIN : [16][8]
FIAT_SHAMIR_PROTOCOL_DOMAIN = "FSBLOBVERIFY_V1_" : [16][8]
RANDOM_CHALLENGE_KZG_BATCH_DOMAIN : [16][8]
RANDOM_CHALLENGE_KZG_BATCH_DOMAIN = "RCKZGBATCH___V1_" : [16][8]