/**
 * This module contains functions that perform ECC Point operations.
 * These functions are specific to the BLS curve, and specifically G1.
 *
 * The Deneb Python specs use the py_ecc library for the same operations.
 * This module's functions are based off of py_ecc.
 * @see https://github.com/ethereum/py_ecc/blob/main/py_ecc/bls12_381/bls12_381_curve.py
 */
module Spec::BlsEC::G1 where

import Common::ModArith
import Common::Utils
import Spec::BlsEC::Curve
import Spec::BlsEC::Field

/**
 * G1 elliptic curve point.
 *
 * NOTE: by using the Z type, all modular arithmetic
 *  is handled automatically and there is no potential
 *  for any overflow errors.
 */
type G1Point =
    { xCoord : Z Fq
    , yCoord : Z Fq
    }

/**
 * Representation of G1 point at infinity.
 *
 * NOTE: (0,0) isn't actually the point at infinity, but since we
 *  can't use enums here and (0, 0) is not on the curve, it's an
 *  acceptable substitute.
 */
G1_INFINITY : G1Point
G1_INFINITY =
    { xCoord = 0
    , yCoord = 0
    }

/**
 * Generator for curve over Fq.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/bls12_381/bls12_381_curve.py#L35
 */
G1 : G1Point
G1 =
    { xCoord = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507
    , yCoord = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569
    }

/**
 * Determines whether or not the given point is on the G1 curve.
 * The point must satisfy the EC equation: y^^2 = x^^3 + 4
 * ```repl
 * :check g1_is_valid_point G1
 * :check g1_is_valid_point G1_2P
 * :check g1_is_valid_point G1_3P
 * :check g1_is_valid_point G1_4P
 * :check g1_is_valid_point G1_5P
 * :check g1_is_valid_point G1_6P
 * ```
 */
g1_is_valid_point : G1Point -> Bit
g1_is_valid_point point =
    y^^2 - x^^3 == 4
    where
        x = point.xCoord
        y = point.yCoord

/**
 * Double a G1 point
 * @see https://github.com/ethereum/py_ecc/blob/main/py_ecc/bls12_381/bls12_381_curve.py#L84
 */
g1_double : G1Point -> G1Point
g1_double point = newPoint where
    x = point.xCoord
    y = point.yCoord
    m = div_mod (3 * x^^2) (2 * y)
    newX = m^^2 - (2 * x)
    newY = m * (x - newX) - y
    newPoint =
        { xCoord = newX
        , yCoord = newY
        }

/**
 * Add two G1 points
 * @see https://github.com/ethereum/py_ecc/blob/main/py_ecc/bls12_381/bls12_381_curve.py#L95
 */
g1_add : G1Point -> G1Point -> G1Point
g1_add p1 p2 =
    if g1_point_eq p1 G1_INFINITY then p2
    else if g1_point_eq p2 G1_INFINITY then p1
    else if (x2 == x1) && (y2 == y1) then
        g1_double p1
    else
        { xCoord = newX
        , yCoord = newY
        }
    where
    x1 = p1.xCoord
    y1 = p1.yCoord
    x2 = p2.xCoord
    y2 = p2.yCoord
    m = div_mod (y2 - y1) (x2 - x1)
    newX = m^^2 - x1 - x2
    newY = m * (x1 - newX) - y1

/**
 * Multiply a G1 point by a scalar
 * @see https://github.com/ethereum/py_ecc/blob/main/py_ecc/bls12_381/bls12_381_curve.py#L114
 * WARNING: This function cannot be called with a scalar equal to the `BLS_MODULUS`.
 *  Call `g1_multi` instead if `scalar == BLS_MODULUS`.
 * The optimization of running scalar multiplication on the inverse and then using the
 *  inverse of `y` is described here: https://www.mdpi.com/2227-7390/12/6/881, Section 4, second case
 * ```repl
 * :check g1_multi_optimized G1 0 == G1_INFINITY
 * :check g1_multi_optimized G1 1 == G1
 * :check g1_multi_optimized G1 6 == G1_6P
 * :check g1_multi_optimized G1 (`(BLS_MODULUS)-1) == g1_multi G1 (`(BLS_MODULUS)-1)
 * ```
 */
g1_multi_optimized : G1Point -> UInt256 -> G1Point
g1_multi_optimized point scalar =
    if scalar < `(BLS_MODULUS) / 2
        then g1_multi point scalar
    else
        { xCoord = x
        , yCoord = y
        }
    where
        inverse_scalar = `(BLS_MODULUS) - scalar
        inverse_point = g1_multi point inverse_scalar
        y = fromInteger (`(Fq) - (fromZ inverse_point.yCoord))
        x = inverse_point.xCoord

/**
 * Multiply a G1 point by a scalar
 * @see https://github.com/ethereum/py_ecc/blob/main/py_ecc/bls12_381/bls12_381_curve.py#L114
 * ```repl
 * :check g1_multi G1 0 == G1_INFINITY
 * :check g1_multi G1 1 == G1
 * :check g1_multi G1 6 == G1_6P
 * :check g1_multi G1_2P 3 == g1_multi G1_3P 2
 * ```
 */
g1_multi : G1Point -> UInt256 -> G1Point
g1_multi point scalar =
    if scalar == 0 then G1_INFINITY
        | scalar == 1 then point
        // If scalar is even, just double
        | scalar % 2 == 0 then g1_multi (g1_double point) (scalar / 2)
        // If scalar is odd, double and add
        else g1_add ((g1_multi (g1_double point) (scalar / 2))) point

/**
 * Randomize tesitng to show the two g1_multi functions are equivalent.
 * ```repl
 * :check g1_multis_equiv
 * ```
 * This takes about a minute.
 */
g1_multis_equiv : UInt256 -> Bit
property g1_multis_equiv scalar = precondition ==> statement where
    precondition = scalar < `(BLS_MODULUS)
    statement = g1_multi G1 scalar == g1_multi_optimized G1 scalar

/**
 * Determine whether or not the G1 point is a member of the subgroup.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/bls/g2_primitives.py#L34
 * ```repl
 * :check (subgroup_check G1_INFINITY) == False
 * :check (subgroup_check G1) == True
 * :check (subgroup_check G1_2P) == True
 * ```
 * NOTE: these repl tests are very slow (~5 seconds).
 */
subgroup_check : G1Point -> Bit
subgroup_check point = G1_INFINITY != (g1_multi point `(BLS_MODULUS))

/*
 * ===============
 * Unit test suite
 * ===============
 */

// All of these points were generated from: http://www.christelbach.com/eccalculator.aspx

G1_2P : G1Point
G1_2P =
    { xCoord = 838589206289216005799424730305866328161735431124665289961769162861615689790485775997575391185127590486775437397838
    , yCoord = 3450209970729243429733164009999191867485184320918914219895632678707687208996709678363578245114137957452475385814312
    }

G1_3P : G1Point
G1_3P =
    { xCoord = 1527649530533633684281386512094328299672026648504329745640827351945739272160755686119065091946435084697047221031460
    , yCoord = 487897572011753812113448064805964756454529228648704488481988876974355015977479905373670519228592356747638779818193
    }

G1_4P : G1Point
G1_4P =
    { xCoord = 1940386630589042756063486004190165295069185078823041184114464346315715796897349637805088429212932248421554491972448
    , yCoord = 3114296198575988357603748217414299058449850389627766458803888308926785677746356789015548793127623382888106859156543
    }

G1_5P : G1Point
G1_5P =
    { xCoord = 2601793266141653880357945339922727723793268013331457916525213050197274797722760296318099993752923714935161798464476
    , yCoord = 3498096627312022583321348410616510759186251088555060790999813363211667535344132702692445545590448314959259020805858
    }

G1_6P : G1Point
G1_6P =
    { xCoord = 1063080548659463434646774310890803636667161539235054707411467714858983518890075240133758563865893724012200489498889
    , yCoord = 3669927104170827068533340245967707139563249539898402807511810342954528074138727808893798913182606104785795124774780
    }

G1_7P : G1Point
G1_7P =
    { xCoord = 3872473689207892378470335395114902631176541028916158626161662840934315241539439160301564344905260612642783644023991
    , yCoord = 2547806390474846378491145127515427451279430889101277169890334737406180277792171092197824251632631671609860505999900
    }

/**
 * Helper function for testing point equality.
 */
g1_point_eq : G1Point -> G1Point -> Bit
g1_point_eq p1 p2 =
    (p1.xCoord == p2.xCoord) && (p1.yCoord == p2.yCoord)

/**
 * Unit tests for `g1_is_valid_point`.
 * ```repl
 * :check test_g1_is_valid_point G1
 * :check test_g1_is_valid_point G1_2P
 * :check test_g1_is_valid_point G1_3P
 * :check test_g1_is_valid_point G1_4P
 * :check test_g1_is_valid_point G1_5P
 * :check test_g1_is_valid_point G1_6P
 * :check test_g1_is_valid_point G1_7P
 */
test_g1_is_valid_point : G1Point -> Bit
property test_g1_is_valid_point point = g1_is_valid_point point

/**
 * Unit tests for `g1_double`.
 * ```repl
 * :check test_g1_double G1 G1_2P
 * :check test_g1_double G1_2P G1_4P
 * :check test_g1_double G1_3P G1_6P
 * :check test_g1_double (g1_double G1) G1_4P
 * ```
 */
test_g1_double : G1Point -> G1Point -> Bit
property test_g1_double p1 p2 =
    g1_point_eq (g1_double p1) p2

/**
 * Unit tests for `g1_add`.
 * ```repl
 * :check test_g1_add G1 G1_INFINITY G1
 * :check test_g1_add G1_INFINITY G1_3P G1_3P
 * :check test_g1_add G1_INFINITY G1_INFINITY G1_INFINITY
 * :check test_g1_add G1 G1 G1_2P
 * :check test_g1_add G1 G1_2P G1_3P
 * :check test_g1_add G1_2P G1 G1_3P
 * :check test_g1_add G1_3P G1 G1_4P
 * :check test_g1_add G1_2P G1_2P G1_4P
 * :check test_g1_add G1 G1_4P G1_5P
 * :check test_g1_add G1_3P G1_2P G1_5P
 * :check test_g1_add G1_2P G1_4P G1_6P
 * ```
 */
test_g1_add : G1Point -> G1Point -> G1Point -> Bit
property test_g1_add p1 p2 p3 =
    g1_point_eq (g1_add p1 p2) p3

/**
 * Unit tests for `g1_multi`.
 * ```repl
 * :check test_g1_multi G1 0 G1_INFINITY
 * :check test_g1_multi G1 1 G1
 * :check test_g1_multi G1 2 G1_2P
 * :check test_g1_multi G1 3 G1_3P
 * :check test_g1_multi G1 6 G1_6P
 * :check g1_multi G1_2P 3 == g1_multi G1_3P 2
 * ```
 */
test_g1_multi : G1Point -> UInt256 -> G1Point -> Bit
property test_g1_multi point scalar expected =
    g1_point_eq (g1_multi point scalar) expected
