/**
 * This module provides support for polynomial extension fields.
 * Specifically, we need to support Fq2 and Fq12.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L204
 */
module Spec::BlsEC::FQP where

import Spec::BlsEC::Field
import Spec::BlsEC::Poly(poly_extended_euclidean)

/**
 * A polynomial field extension type contains a list of
 *  coefficients which are elements of Fq.
 */
type FQP n = [n](Z Fq)

/**
 * A G2 point is comprised of two Fq2 elements, or sets of coefficients, each of degree two.
 * Each element is comprised of a real and imaginary coeffsicient.
 */
type Fq2 = FQP 2

/**
 * A G12 point is comprised of two Fq12 elements, or sets of coefficients, each of degree twelve.
 */
type Fq12 = FQP 12

/**
 * The modulus coefficients for the quadratic extension field Fq2.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_properties.py#L30
 */
FQ2_MODULUS_COEFFICIENTS : Fq2
FQ2_MODULUS_COEFFICIENTS = [1, 0]

/**
 * The modulus coefficients for the twelfth extension field Fq12.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_properties.py#L31
 */
FQ12_MODULUS_COEFFICIENTS : Fq12
FQ12_MODULUS_COEFFICIENTS = [2, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0]

/**
 * Addition of two sets of coefficients.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L232
 * ```repl
 * :check G2_y ~+~ G2_x == G2_y_plus_x
 * :check G12_y ~+~ G12_x == G12_y_plus_x
 * :check G12_x ~*~ G12_x == G12_xSquared
 * :check G12_x ~*~ G12_x ~*~ G12_x == G12_xCubed
 * ```
 */
(~+~) : {n} (fin n, n >= 1) => FQP n -> FQP n -> FQP n
(~+~) coeffs1 coeffs2 = [c1i + c2i | c1i <- coeffs1 | c2i <- coeffs2]

/**
 * Subtraction of two sets of coefficients.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L240
 * ```repl
 * :check G2_y ~-~ G2_x == G2_y_minus_x
 * :check G12_y ~-~ G12_x == G12_y_minus_x
 * ```
 */
(~-~) : {n} (fin n, n >= 1) => FQP n -> FQP n -> FQP n
(~-~) coeffs1 coeffs2 = [c1i - c2i | c1i <- coeffs1 | c2i <- coeffs2]

/**
 * Multiplication of two sets of coefficients.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L251
 * ```repl
 * :check G2_x ~*~ G2_x == G2_xSquared
 * :check G2_x ~*~ G2_x ~*~ G2_x == G2_xCubed
 * ```
 */
(~*~) : {n} (fin n, n <= 12, n >= 2) => FQP n -> FQP n -> FQP n
(~*~) coeffs1 coeffs2 = reduce_while b modulus_coeffs (2 * `(n) - 1) where
    b = poly_multi coeffs1 coeffs2

reduce_while : {a, n} (fin n, n <= 12, n >= 2, fin a, a == 2 * n - 1) => [a](Z Fq) -> [n](Z Fq) -> Integer -> [n](Z Fq)
reduce_while b mod_coeffs len =
    if len == `(n) then take`{n} b
    else reduce_while b' mod_coeffs (len - 1)
    where
        top = b@(len-1)
        exp = len - `(n) - 1
        b' = [compute bj j | bj <- b | j <- [0 .. (a-1)]]
        compute bj j =
            if (j >= exp) && (j <= exp + `(n) - 1) then
                bj - (top * (mod_coeffs@(j-exp)))
            else bj

/**
 * Compute the initial polynomial multiplication.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L253
 * ```repl
 * :check poly_multi [2, 3] [5, 7] == [10, 29, 21]
 * let expected = [8,22,39,87,130,149,133,153,233,278,178,188,276,239,207,125,94,88,51,35,41,28,30]
 * :check poly_multi [2,3,3,1,2,5,6,1,2,5,3,5] [4,5,6,25,12,1,4,6,2,1,2,6] == expected
 * ```
 */
poly_multi : {n, a} (fin n, 2 * n >= 1, fin a, a == 2 * n - 1) => FQP n -> FQP n -> FQP a
poly_multi l r =
    if (all (\x -> x == 0) l) then zero
    else ((scalar_mult (l@0) r) # zero) ~+~ (((poly_multi (l << 1) r) # zero) >> 1)
    where scalar_mult x ys = map ((*) x) ys

/**
 * Multiplication of an integer and a set of coefficients.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L249
 * ```repl
 * :check G2_x ~* 2 == G2_xDoubled
 * :check 2 *~ G2_x == G2_xDoubled
 * ```
 */
(*~) : {n} (fin n, n >= 1) => Integer -> FQP n -> FQP n
(*~) value coeffs = [value' * ci | ci <- coeffs] where
    value' = fromInteger value

(~*) : {n} (fin n, n >= 1) => FQP n -> Integer -> FQP n
(~*) coeffs value = value *~ coeffs

/**
 * Division of two sets of coefficients.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L280
 * ```repl
 * :check G2_x ~/~ G2_x == [1, 0]
 * :check G2_y ~/~ G2_x == G2_y_div_mod_x
 * :check G12_x ~/~ G12_x == [1] # zero
 * :check G12_y ~/~ G12_x == G12_y_div_mod_x
 * ```
 */
(~/~) : {n} (fin n, n <= 12, n >= 2) => FQP n -> FQP n -> FQP n
(~/~) coeffs1 coeffs2 = coeffs1 ~*~ (fqp_inv coeffs2)

/**
 * Compute the inverse of a Fq2 element.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L302
 * ```repl
 * :check fqp_inv G2_x == G2_xInverse
 * :check fqp_inv (fqp_inv G2_x) == G2_x
 * :check fqp_inv G2_y == G2_yInverse
 * :check fqp_inv (fqp_inv G2_y) == G2_y
 * :check fqp_inv G12_x == G12_xInverse
 * :check fqp_inv (fqp_inv G12_x) == G12_x
 * ```
 */
fqp_inv : {n} (fin n, n <= 12, n >= 2) => FQP n -> FQP n
fqp_inv coeffs = poly_extended_euclidean`{n+1} lm low hm high where
    lm = [1] # n_zeros
    hm = [0] # n_zeros
    low = coeffs # [0]
    high = modulus_coeffs # [1]
    n_zeros = repeat`{n} 0

/**
 * The modulus coefficients of the polynomial extension fields.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_properties.py#L30-L31
 */
modulus_coeffs : {n} (fin n, n <= 12, n >= 2) => FQP n
modulus_coeffs =
    // The appending by 'zero' is to help the Cryptol type checker.
    // It actually evaluates to an empty bitvector.
    if `(n) == 2 then FQ2_MODULUS_COEFFICIENTS # zero
     | `(n) == 12 then take`{n} FQ12_MODULUS_COEFFICIENTS
    else zero

/**
 * Exponentiation of a set of coeffsicients by a scalar.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L291
 * ```repl
 * :check G2_x~^^0 == [1, 0]
 * :check G2_x~^^1 == G2_x
 * :check G2_x~^^2 == G2_xSquared
 * :check G2_x~^^3 == G2_xCubed
 * :check G12_x~^^0 == [1] # zero
 * :check G12_x~^^1 == G12_x
 * :check G12_x~^^2 == G12_xSquared
 * :check G12_x~^^3 == G12_xCubed
 * ```
 */
(~^^) : {n} (fin n, n <= 12, n >= 2) => FQP n -> Integer -> FQP n
(~^^) coeffs scalar =
    if scalar == 0 then
        [1] # zero
     | scalar == 1 then
        coeffs
     | scalar % 2 == 0 then
        (coeffs ~*~ coeffs) ~^^ (scalar / 2)
     else
        ((coeffs ~*~ coeffs) ~^^ (scalar / 2)) ~*~ coeffs

/**
 * Negate the set of coefficients.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L355
 * ```repl
 * :check fqp_neg (fqp_neg G2_x) == G2_x
 * :check fqp_neg (fqp_neg G12_x) == G12_x
 * ```
 */
fqp_neg : {n} (fin n, n >= 1) => FQP n -> FQP n
fqp_neg coeffs = [-ci | ci <- coeffs]

/**
 * Equality of two sets of coefficients.
 * ```repl
 * :check G2_x ~==~ G2_x
 * :check G12_x ~==~ G12_x
 * ```
 */
(~==~) : {n} (fin n, n >= 1) => FQP n -> FQP n -> Bit
(~==~) coeffs1 coeffs2 = and [c1i == c2i | c1i <- coeffs1 | c2i <- coeffs2]

/**
 * X coefficients for generator for twisted curve over Fq2.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/bls12_381/bls12_381_curve.py#L44
 */
G2_x : Fq2
G2_x = [ 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160
       , 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758
       ]

/**
 * Y coefficients for generator for twisted curve over Fq2.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/bls12_381/bls12_381_curve.py#L44
 */
G2_y : Fq2
G2_y = [ 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
       , 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582
       ]

/**
 * G2_x + G2_y. Computed using py_ecc.
 */
G2_y_plus_x : Fq2
G2_y_plus_x =
    [ 2337851671874758553755193637188231783190898931008430971079287309306138512109538745297216704607199160594256266651065
    , 3986698009736546165718461780529819517744210518930240528684401185085612201771633997414458852832304583413319107585340
    ]

/**
 * G2_x - G2_y. Computed using py_ecc.
 */
G2_y_minus_x : Fq2
G2_y_minus_x =
    [ 1632449532699825317380915405166111493410839025422880490639470020826550940638108691550521503919468808688732414044745
    , 1870818876469786139193731976758160400328152687915953296697712908626373202724554996990127355752626211775441853413611
    ]

/**
 * G2_x squared. Computed using py_ecc.
 */
G2_xSquared : Fq2
G2_xSquared =
    [ 1997086149283677522843833040423074048426674013790346437450988890364808601048656494674186077061491944389142492819694
    , 3113349101563180256960455051481244719726682130931247942710023183696345206282753395927436272834951815958170074391256
    ]

/**
 * G2_x cubed. Computed using py_ecc.
 */
G2_xCubed : Fq2
G2_xCubed =
    [ 3341065098200961989598748404381324054605449840948293400785922068969583005812936621662354076014412578129291257715484
    , 2133050398774337206222816300118221327418763981033055222570091459262312519047975404484651902003138703421962555090218
    ]

/**
 * G2_x multipled by two. Computed using py_ecc.
 */
G2_xDoubled : Fq2
G2_xDoubled =
    [ 705402139174933236374278232022120289780059905585550480439817288479587571471430053746695200687730351905523852606320
    , 2115879133266760026524729803771659117416057831014287231986688276459238999047079000424331497079678371637877254171729
    ]

/**
 * G2_y / G2_x. Computed using py_ecc.
 */
G2_y_div_mod_x : Fq2
G2_y_div_mod_x =
    [ 2645964961145567287646174681515652840605182444869364111679220104429646387260976011822898928226591963576020240426619
    , 3656195751079888906744826605664754595376734064625263022628224160781596224005157110042338963344577397675474692059176
    ]

/**
 * G2_x inverse. Computed using py_ecc.
 */
G2_xInverse : Fq2
G2_xInverse =
    [ 1223514866584400226619392018844575446040489926980124362465220784014275923982521236729115905530146470033177964357563
    , 3495453419063574139925455551631318136524378768480668459768684498547208492074727172949503320416899422709399085629096
    ]

/**
 * G2_y inverse. Computed using py_ecc.
 */
G2_yInverse : Fq2
G2_yInverse =
    [ 3828301281232776537393462114696026453820925117135598932697882187079936548530569912296382199133331215710911400309693
    , 1450185639544495128598198914056492809111071767684112182252696543466687995844478949870392653614483391964324409513904
    ]

/**
 * X coefficients for generator for the curve over Fq12.
 */
G12_x : Fq12
G12_x =
    [ 0, 0, 0, 0
    , 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160
    , 0, 0, 0, 0, 0
    , 1353221637328373545892060349371360746048220186341936159219732281025920769516621702780080981380240920942561918531299
    , 0
    ]

/**
 * Y coefficients for generator for the curve over Fq12.
 */
G12_y : Fq12
G12_y =
    [ 0, 0, 0
    , 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
    , 0, 0, 0, 0, 0
    , 1472406309213353956798468635167385199506877017588472562248853724925831900559844855499883907296819622485916638215732
    , 0, 0
    ]

/**
 * G12_y + G12_x. Computed using py_ecc.
 */
G12_y_plus_x : Fq12
G12_y_plus_x =
    [ 0, 0, 0
    , 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
    , 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160
    , 0, 0, 0, 0
    , 1472406309213353956798468635167385199506877017588472562248853724925831900559844855499883907296819622485916638215732
    , 1353221637328373545892060349371360746048220186341936159219732281025920769516621702780080981380240920942561918531299
    , 0
    ]

/**
 * G12_x - G12_y. Computed using py_ecc.
 */
G12_y_minus_x : Fq12
G12_y_minus_x =
    [ 0, 0, 0
    , 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
    , 3649708485634200775230650709724844011666852867146232645112149491884237864755122837569340028785150488085132346256627
    , 0, 0, 0, 0
    , 1472406309213353956798468635167385199506877017588472562248853724925831900559844855499883907296819622485916638215732
    , 2649187917893293847525729476364543410508662633597071726112325855098110880974216161662606647748774743095332354028488
    , 0
    ]

/**
 * G12_x squared. Computed using py_ecc.
 */
G12_xSquared : Fq12
G12_xSquared =
    [ 0, 0
    , 1997086149283677522843833040423074048426674013790346437450988890364808601048656494674186077061491944389142492819694
    , 0, 0, 0, 0, 0
    , 558131476139751367058311005529085335650004058570450752629517146665768302617048450626625097886729935784513790785781
    , 0, 0, 0
    ]

/**
 * G12_x cubed. Computed using py_ecc.
 */
G12_xCubed : Fq12
G12_xCubed =
    [ 3341065098200961989598748404381324054605449840948293400785922068969583005812936621662354076014412578129291257715484
    , 0, 0, 0, 0, 0
    , 3398402205508355001729823773604352792963539889981388796224142831270396407108357255853836542123378726684229921247154
    , 0, 0, 0, 0, 0
    ]

/**
 * G12_x / G12_y. Computed using py_ecc.
 */
G12_y_div_mod_x : Fq12
G12_y_div_mod_x =
    [ 0, 0, 0, 0, 0
    , 2645964961145567287646174681515652840605182444869364111679220104429646387260976011822898928226591963576020240426619
    , 0, 0, 0, 0, 0
    , 2506320172577994506258220874942502955664217219847453398140531096237990743617509481331063832123500549068674362096172
    ]

/**
 * G12_x inverse. Computed using py_ecc.
 */
G12_xInverse : Fq12
G12_xInverse =
    [ 0, 0
    , 1730471002742493480111726292949161466072993978438463788028594421591099082398631928222300214242262711361673151288254
    , 0, 0, 0, 0, 0
    , 3495453419063574139925455551631318136524378768480668459768684498547208492074727172949503320416899422709399085629096
    , 0, 0, 0
    ]

/*
 * ==========
 * Properties
 * ==========
 */

/**
 * Verify that addition is commutative.
 * ```repl
 * :prove fqp_addition_commutative`{2}
 * :prove fqp_addition_commutative`{12}
 * ```
 */
fqp_addition_commutative : {n} (fin n, n >= 1) => FQP n -> FQP n -> Bit
property fqp_addition_commutative a b =
    a ~+~ b == b ~+~ a

/**
 * Verify that multiplication is commutative.
 * ```repl
 * :set prover=cvc5
 * :prove fqp_multiplication_commutative`{2}
 * :prove fqp_multiplication_commutative`{12}
 * ```
 * NOTE: this proof works for Z3 v4.13 but not v4.8. Takes >50 seconds.
 *  It is much faster (~5 seconds) with cvc5.
 */
fqp_multiplication_commutative : {n} (fin n, n <= 12, n >= 2) => FQP n -> FQP n -> Bit
property fqp_multiplication_commutative a b =
    a ~*~ b == b ~*~ a

/**
 * Verify that subtraction is not commutative,
 *   unless both coefficients are equal.
 * ```repl
 * :prove fqp_subtraction_not_commutative`{2}
 * :prove fqp_subtraction_not_commutative`{12}
 * ```
 */
fqp_subtraction_not_commutative : {n} (fin n, n >= 1) => FQP n -> FQP n -> Bit
property fqp_subtraction_not_commutative a b = precondition ==> statement where
    precondition = a != b
    statement = a ~-~ b != b ~-~ a

/**
 * Verify that squaring is that same using either multiplication or exponentiation.
 * ```repl
 * :prove fqp_squared_equiv`{2}
 * :prove fqp_squared_equiv`{12}
 * ```
 */
fqp_squared_equiv : {n} (fin n, n <= 12, n >= 2) => FQP n -> Bit
property fqp_squared_equiv c =
    c~^^2 == c ~*~ c

/**
 * Verify that equality is commutative.
 * ```repl
 * :prove fqp_equality_commutative`{2}
 * :prove fqp_equality_commutative`{12}
 * ```
 */
fqp_equality_commutative : {n} (fin n, n >= 1) => FQP n -> FQP n -> Bit
property fqp_equality_commutative a b =
    a ~==~ b == b ~==~ a
