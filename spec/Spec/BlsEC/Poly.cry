/**
 * This module contains polynomial utility functions for polynomial extension field.
 */
module Spec::BlsEC::Poly where

import Common::ModArith
import Spec::BlsEC::Field

/**
 * Extended euclidean algorithm for polynomials.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L302
 * ```repl
 * let expected_real = 1223514866584400226619392018844575446040489926980124362465220784014275923982521236729115905530146470033177964357563
 * let expected_imag = 3495453419063574139925455551631318136524378768480668459768684498547208492074727172949503320416899422709399085629096
 * let expected = (expected_real, expected_imag)
 * let low = [352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160, 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758, 0]
 * let high = [1, 0, 1]
 * :prove poly_extended_euclidean [1, 0, 0] low [0, 0, 0] high == expected
 * ```
 */
poly_extended_euclidean : {n} (fin n, n == 3) => [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> (Z Fq, Z Fq)
poly_extended_euclidean lm low hm high = (invReal, invImag) where
    (lm', low') = inv_while lm low hm high
    invReal = div_mod (lm'@0) (low'@0)
    invImag = div_mod (lm'@1) (low'@0)

/**
 * Implements the inner while look of the inverse function.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L311
 * ```repl
 * let expected_lm = [1, 3997412857189233618731963627508854230078445114494716000095659671964648842284302098129323323820452066022319385239514, 0]
 * let expected_low = [3203368238181144282106772347113517508010041690876866219296399795152074745917376658324329538654856903029901947573594, 0, 0]
 * let expected = (expected_lm, expected_low)
 * let low = [352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160, 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758, 0]
 * let high = [1, 0, 1]
 * :prove inv_while [1, 0, 0] low [0, 0, 0] high == expected
 * ```
 */
inv_while : {n} (fin n, n == 3) => [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> ([n](Z Fq), [n](Z Fq))
inv_while lm low hm high =
    if (deg low) > 0 then
        inv_while nm new lm low
    else (lm, low)
    where
        r = poly_rounded_div high low
        (nm, new) = inv_nested_for lm low hm high r
/**
 * The `inv_nested_for` computation.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/fields/field_elements.py#L311
 * To see why this function and the following subfunctions work, I'll walk through the
 *  pseudo code and rational. Note, the computation for `nm` and `new` are the same,
 *  the first just uses `lm` and the latter `low`. So we'll just work the computation
 *  with one of them, `nm`.
 *
 * Here is our starting code (see link above) with degree 2, and dropping the `new`.
 * for i = 0..2
 *     for j = 2..0
 *         nm[i + j] -= lm[i] * int(r[j])
 *
 * For each element of `nm`, we subtract one or more multiplications of `lm` and `r`.
 *
 * Let's replace the `i + j` indexing into `nm` with `k`.
 * So now we have this:
 *  for k=0..2:
 *      for i=0..k, j=k..0
 *          nm[k] -= lm[i] * r[j]
 *
 * We have `k` which iterates through the elements of `nm`. For each `k`, `i`
 *  always starts at 0 and increments while `i <= k` for each next multiplication
 *  that we need to subtract from the original `nm[k]` element. For each `k`, the
 *  `j` index does the opposite --- it starts a `k` and then decrements down to 0.
 *
 * So lets think about the pairs of indices `i`, `j` that we care about:
 *  when k=0 then [(i=0, j=0)]
 *  when k=1 then [(i=1, j=0), (i=0, j=1)]
 *  when k=2 then [(i=2, j=0), (i=1, j=1), (i=0, j=2)]
 *
 * This kind of computation lends itself to a fold per `k`. But Cryptol
 *  needs us to use a constant sized list of indices, not variable (in `k+1`).
 *
 * To do this, we need some what to represent of pair of indices that shouldn't
 *  actually be used for the subtraction needed. We'll use (-1, -1) for simplicity.
 *
 * Now we have:
 *  when k=0 then [(i=0, j=0), (i=-1, j=-1), (i=-1, j=-1)]
 *  when k=1 then [(i=1, j=0), (i=0, j=1), (i=-1, j=-1)]
 *  when k=2 then [(i=2, j=0), (i=1, j=1), (i=0, j=2)]
 *
 * In summary, we will do the following:
 * 1) Generate the list of indices, including the placeholder (-1, -1) indices
 *  - This is what function`inv_nested_for_index_pairs` does
 * 2) Determine which indices result in a product or zero, stored in a list
 *  - This is what mapping over `inv_nested_for_multi` does
 * 3) Subtract each value in that list from our original element
 *  - This is what `inv_nested_for_compute_value`
 * 4) Do this for both `nm` and `new`
 *  - This is the body of `inv_nested_for`
 */
inv_nested_for : {n} (fin n, n == 3) => [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq) -> ([n](Z Fq), [n](Z Fq))
inv_nested_for lm low nm new r = (nm', new') where
    nm' = [inv_nested_for_compute_value nmi i lm r | nmi <- nm | i <- [0..(n-1)]]
    new' = [inv_nested_for_compute_value newi i low r | newi <- new | i <- [0..(n-1)]]

/**
 * This function handles the inner computation of the `inv_nested_for` for each element of each list.
 * ```repl
 * :prove inv_nested_for_compute_value 13 0 [3, 5] [2, 7] == (13 - 3*2)
 * ```
 */
inv_nested_for_compute_value : {n} (fin n, n >= 1) => Z Fq -> Integer -> [n](Z Fq) -> [n](Z Fq) -> Z Fq
inv_nested_for_compute_value ni i l r =
    foldl (-) ni (map (poly_pair_multi l r) (inv_nested_for_index_pairs`{n} i))

/**
 * This function performs pair-wise multiplication between two polynomials.
 * ```repl
 * :prove poly_pair_multi [13] [13] (-1, 0) == 0
 * :prove poly_pair_multi [13] [13] (0, -1) == 0
 * :prove poly_pair_multi [13] [13] (-1, -1) == 0
 * :prove poly_pair_multi [(2 : Z Fq), (3 : Z Fq)] [(5 : Z Fq), (7 : Z Fq)] (0, 1) == 14
 * ```
 */
poly_pair_multi : {n} (fin n, n >= 1) => [n](Z Fq) -> [n](Z Fq) -> (Integer, Integer) -> Z Fq
poly_pair_multi l r (i, j) =
    if (i == -1) || (j == -1) then 0
    else (l@i) * (r@j)

/**
 * Computes all combinations of (i,j) pairs where i + j == k.
 * We use the pair (-1, -1) to indicate no computation needed to be performed.
 * ```repl
 * :prove inv_nested_for_index_pairs`{3} 0 == [(0, 0), (-1, -1), (-1, -1)]
 * :prove inv_nested_for_index_pairs`{3} 1 == [(1, 0), (0, 1), (-1, -1)]
 * :prove inv_nested_for_index_pairs`{3} 2 == [(2, 0), (1, 1), (0, 2)]
 * ```
 */
inv_nested_for_index_pairs : {n} (fin n, n >= 1) => Integer -> [n](Integer, Integer)
inv_nested_for_index_pairs k =
    [if j <= k then (k-i, j) else (-1,-1) | i <- [0..(n-1)] | j <- [0..(n-1)]]

/**
 * Compute the degree of the polynomial.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/utils.py#L43
 * ```repl
 * :prove deg [0, 0, 0] == 0
 * :prove deg [1, 0, 0] == 0
 * :prove deg [0, 1, 0] == 1
 * :prove deg [0, 0, 1] == 2
 * ```
 */
deg : {n} (fin n, n >= 1) => [n](Z Fq) -> Integer
deg p = compute_d (`(n)-1) where
    compute_d : Integer -> Integer
    compute_d d =
        if ((p@d) == 0) && (d > 0) then
            compute_d (d - 1)
        else d

/**
 * Division of two polynomials.
 * @see https://github.com/ethereum/py_ecc/blob/70c194edd8d1eb1457805442f0162499dbc0aac5/py_ecc/utils.py#L50
 * ```repl
 * let high = [1, 0, 1]
 * :prove poly_rounded_div high high == [1, 0, 0]
 * let low = [352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160, 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758, 0]
 * let expected = [0, 3760942702196338589502826385415833209682098933908451272344533612462792778154520066649324657897802310897411427023085, 0]
 * :prove poly_rounded_div high low == expected
 */
poly_rounded_div : {n} (fin n, n >= 1) => [n](Z Fq) -> [n](Z Fq) -> [n](Z Fq)
poly_rounded_div a b = compute_outer_loop o0 temp0 start where
    dega = deg a
    degb = deg b
    o0 = (zero:[n](Z Fq))
    temp0 = [x | x <- a]
    start = dega - degb

    compute_outer_loop : [n](Z Fq) -> [n](Z Fq) -> Integer -> [n](Z Fq)
    compute_outer_loop o temp i =
        if i < 0 then o
        else compute_outer_loop o' temp' i'
        where
            o' = [if j == i then (o@j) + oi' else (o@j) | j <- [0..(n-1)]]
            oi' = div_mod (temp@(degb + i)) (b@degb)
            temp' = compute_temp' temp 0
            i' = i - 1

            compute_temp' : [n](Z Fq) -> Integer -> [n](Z Fq)
            compute_temp' t c =
                if c < (degb + 1) then compute_temp' updated_temp (c+1)
                else t
                where
                    updated_temp = [if j == (c + i) then (t@(c + i)) - (o@c) else (t@c) | j <- [0..(n-1)]]
