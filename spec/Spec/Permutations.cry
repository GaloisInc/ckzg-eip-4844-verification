/*
 * The functions in this module are derived from the consensus-specs.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#helper-functions
 */
module Spec::Permutations where

import Common::Utils

/**
 * Check if `value` is a power of two integer.
 * Return `1:[1]` if true and `0:[1]` otherwise.
 * NOTE: We use the `Utils::bit_to_bool` function because SAW cannot
 *  convert the `Bit` type internally to an LLVM integer type.
 */
is_power_of_two : {n} (fin n, n >= 1) => [n] -> [1]
is_power_of_two value = bit_to_bool (is_power_of_two_bit value)

/**
 * Check if `value` is a power of two integer.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#is_power_of_two
 */
is_power_of_two_bit : {n} (fin n, n >= 1) => [n] -> Bit
is_power_of_two_bit value = (value > 0) && ((value && (value - 1)) == 0)

/**
 * Reverse the bits of an integer of length `n`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#reverse_bits
 * NOTE: The Python spec only reverses the low-order bits
 * ```repl
 * :check reverse_bits`{16, 16} 0x18C3 == 0xC318
 * :check reverse_bits`{16, 16} 0x00AA == 0x5500
 * :check reverse_bits`{16, 8} 0x00A5 == 0x00A5
 * ```
 * NOTE: we just chose these values at "random"
 */
reverse_bits : {n, order_bit_length} (fin n, n >= 1, order_bit_length >= 1, order_bit_length <= n)
    => [n] -> [n]
reverse_bits value = zero # reverse (drop`{n - order_bit_length} value)

/**
 * Reverse the low-order bits of a 64-bit integer.
 * This function matches the `reverse_bits_limited` function in c-kzg
 * @see https://github.com/ethereum/c-kzg-4844/blob/main/src/common/utils.c#L84
 */
reverse_bits_limited : [64] -> [64] -> [64]
reverse_bits_limited order value = (reverse value) >> unused_bit_len where
    unused_bit_len = 64 - lg2 order

/**
 * Return the bit-reversed permutation, which is an involution (inverts itself).
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#bit_reversal_permutation
 * Standard algorithm: https://en.wikipedia.org/wiki/Bit-reversal_permutation
 * ```repl
 * let val = [0x18, 0xC3, 0xD5, 0x02, 0x40, 0xAB, 0xC3, 0x18]
 * let expected_permutation = [0x18, 0x40, 0xd5, 0xc3, 0xc3, 0xab, 0x02, 0x18]
 * let permuted_val = bit_reversal_permutation`{8, 8} val
 * :check permuted_val == expected_permutation
 * :check bit_reversal_permutation`{8, 8} permuted_val == val
 * ```
 */
bit_reversal_permutation : {size, len} (fin size, size >= 1, len >= 2, size >= width (len - 1))
    => [len][size] -> [len][size]
bit_reversal_permutation sequence =
    [sequence@(reverse_bits`{size, width (len - 1)} i) | i <- [0 .. (len-1)]]

/*
 *  ==========
 *  Properties
 *  ==========
 */

/**
 * Function `is_power_of_two_bit` should be true for all powers of two.
 * ```repl
 * :prove check_is_power_of_two
 * ```
 * NOTE: We'll just prove up to 2^^4096 --- that seems plenty and is still fast.
 */
property check_is_power_of_two = all is_power_of_two_bit`{4096} [ 2^^n | n <- [0 .. 4096-1]]

/**
 * Property: calling `reverse_bits` twice on an value should return that value.
 * Assumes the same bit size of the input and the same desired low-order bits.
 * ```repl
 * :prove check_reverse_bits_involution`{256, 8}
 * :prove check_reverse_bits_involution`{256, 16}
 * :prove check_reverse_bits_involution`{256, 32}
 * :prove check_reverse_bits_involution`{256, 64}
 * :prove check_reverse_bits_involution`{256, 128}
 * :prove check_reverse_bits_involution`{256, 256}
 * ```
 */
check_reverse_bits_involution : {n, order_bit_length} (fin n, n >= 1, order_bit_length >= 1, order_bit_length <= n)
    => [n] -> Bit
property check_reverse_bits_involution val = precondition ==> statement where
    precondition = lg2 val < `order_bit_length
    statement = (reverse_bits`{n, order_bit_length} (reverse_bits`{n, order_bit_length} val)) == val

/**
 * Property: Both implementations for "reverse_bits" are equivalent for 64-bit values.
 * ```repl
 * :prove check_reverse_bits_equiv`{64}
 * ```
 */
check_reverse_bits_equiv : {order_bit_length} (order_bit_length >= 1, order_bit_length <= 64)
    => [64] -> [64] -> Bit
property check_reverse_bits_equiv order val = precondition ==> statement where
    precondition = lg2 order == `order_bit_length
    statement = reverse_bits`{64, order_bit_length} val == reverse_bits_limited order val

/**
 * Property: calling `bit_reversal_permutation` twice on an value should return that value.
 * ```repl
 * :prove check_bit_reversal_permutation_involution`{256, 8}
 * :prove check_bit_reversal_permutation_involution`{256, 16}
 * :prove check_bit_reversal_permutation_involution`{256, 32}
 * :prove check_bit_reversal_permutation_involution`{256, 64}
 * :prove check_bit_reversal_permutation_involution`{256, 128}
 * :prove check_bit_reversal_permutation_involution`{256, 256}
 * ```
 */
check_bit_reversal_permutation_involution : {size, len} (fin size, size >= 1, len >= 2, size >= width (len - 1))
    => [len][size] -> Bit
property check_bit_reversal_permutation_involution val =
    (bit_reversal_permutation`{size, len} (bit_reversal_permutation`{size, len} val)) == val
