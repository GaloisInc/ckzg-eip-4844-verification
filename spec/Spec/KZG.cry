/**
 * The module contains functions that perform the BLS KZG operations.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#kzg
 */
module Spec::KZG where

import Common::ModArith
import Spec::BlsEC::Curve
import Spec::BlsEC::Field
import Spec::BlsEC::G1
import Spec::BlsEC::GP
import Spec::BlsEC::Pairing
import Spec::BlsHelpers
import Spec::BlsSerde
import Spec::Permutations
import Spec::Polynomials
import Spec::TrustedSetup

/**
 * Create the polynomial commitment for the given `Blob`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#blob_to_kzg_commitment
 */
blob_to_kzg_commitment : Blob -> KZGCommitment
blob_to_kzg_commitment blob =
    g1_lincomb (bit_reversal_permutation KZG_SETUP_G1_LAGRANGE) (blob_to_polynomial blob)

/**
 * Given `y == p(z)` for a polynomial `p(x)`, compute `q(z)`: the KZG quotient polynomial evaluated at `z` for the
 *  special case where `z` is in roots of unity.
 * For more details, read https://dankradfeist.de/ethereum/2021/06/18/pcs-multiproofs.html section "Dividing
 *  when one of the points is zero". The code below computes q(x_m) for the roots of unity special case.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_quotient_eval_within_domain
 * NOTE: Test found in 'Test/KZG/ComputeQuotient/TV1.cry'
 */
compute_quotient_eval_within_domain : BlsFieldElement -> Polynomial -> BlsFieldElement -> BlsFieldElement
compute_quotient_eval_within_domain z polynomial y = toIntegral result where
    result = sum [compute i | i <- [0 .. (FIELD_ELEMENTS_PER_BLOB-1)]]
    f i = (fromIntegral (polynomial@i)) - (fromIntegral y)
    omega i = fromIntegral`{BLS_MODULUS} (ROOTS_OF_UNITY_BRP@i)
    numerator i = (f i) * (omega i)
    // Adding the BLS_MODULUS doesn't affect the computation because it is modular arithmetic with that modulus
    denominator i = z' * (z' - (omega i))
    z' = fromIntegral z
    // Skip the evaluation point (z) in the sum
    compute i = if omega i != z' then div_mod (numerator i) (denominator i) else 0

/**
 * Helper function for `compute_kzg_proof` and `compute_blob_kzg_proof`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_kzg_proof_impl
 * Called by `compute_kzg_proof` for which we have a test vector.
 */
compute_kzg_proof_impl : Polynomial -> BlsFieldElement -> (KZGProof, BlsFieldElement)
compute_kzg_proof_impl polynomial z = (proof, y) where
    // For all x_i, compute p(x_i) - p(z)
    y = evaluate_polynomial_in_evaluation_form polynomial z
    polynomial_shifted = [(fromIntegral`{BLS_MODULUS} p) - (fromIntegral y) | p <- polynomial]
    // For all x_i, compute (x_i - z)
    denominator_poly = [(fromIntegral`{BLS_MODULUS} x) - (fromIntegral z) | x <- ROOTS_OF_UNITY_BRP]
    // Compute the quotient polynomial directly in evaluation form
    quotient_polynomial = [quotient i a b | a <- polynomial_shifted | b <- denominator_poly | i <- [0 .. FIELD_ELEMENTS_PER_BLOB-1]]
    // Handle the conditional computation of computing the quotient
    quotient : Integer -> Z BLS_MODULUS -> Z BLS_MODULUS -> BlsFieldElement
    quotient i a b =
        if b == 0 then
            // The denominator is zero hence `z` is a root of unity: we must handle it as a special case.
            // This case can only happen once at most.
            compute_quotient_eval_within_domain (ROOTS_OF_UNITY_BRP@i) polynomial y
        else
            // Compute: q(x_i) = (p(x_i) - p(z)) / (x_i - z).
            toIntegral (div_mod`{BLS_MODULUS} a b)
    proof = g1_lincomb (bit_reversal_permutation KZG_SETUP_G1_LAGRANGE) quotient_polynomial

/**
 * Compute KZG proof at point `z` for the polynomial represented by `blob`.
 * Do this by computing the quotient polynomial in evaluation form: q(x) = (p(x) - p(z)) / (x - z).
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_kzg_proof
 * NOTE: Test found in 'Test/KZG/ComputeProof/TV1.cry'
 */
compute_kzg_proof : Blob -> Bytes32 -> (KZGProof, Bytes32)
compute_kzg_proof blob z_bytes = (proof, y) where
    polynomial = blob_to_polynomial blob
    (proof, y') = compute_kzg_proof_impl polynomial (bytes_to_bls_field z_bytes)
    y = split`{BYTES_PER_FIELD_ELEMENT} y'

/**
 * Verify KZG proof that `p(z) == y` where `p(z)` is the polynomial represented by `polynomial_kzg`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#verify_kzg_proof_impl
 * Called by `verify_kzg_proof` for which we have a test vector.
 */
verify_kzg_proof_impl : KZGCommitment -> BlsFieldElement -> BlsFieldElement -> KZGProof -> Bit
verify_kzg_proof_impl commitment z y proof = pairing_check points where
    // Verify: P - y = Q * (X - z)
    x_minus_z = g2_add (bytes96_to_G2 (KZG_SETUP_G2_MONOMIAL@1)) g2_mult
    g2_mult = g2_multi_optimized G2 ((`(BLS_MODULUS) - z) % `(BLS_MODULUS))
    p_minus_y = g1_add (bytes48_to_G1 commitment) g1_mult
    g1_mult = g1_multi_optimized G1 ((`(BLS_MODULUS) - y) % `(BLS_MODULUS))
    points = [(p_minus_y, (g2_negate G2)), ((bytes48_to_G1 proof), x_minus_z)]

/**
 * Verify KZG proof that `p(z) == y` where `p(z)` is the polynomial represented by `polynomial_kzg`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#verify_kzg_proof
 * NOTE: Test found in 'Test/KZG/VerifyProof/TV1.cry'
 */
verify_kzg_proof : Bytes48 -> Bytes32 -> Bytes32 -> Bytes48 -> Bit
verify_kzg_proof commitment_bytes z_bytes y_bytes proof_bytes =
    verify_kzg_proof_impl (bytes_to_kzg_commitment commitment_bytes)
                          (bytes_to_bls_field z_bytes)
                          (bytes_to_bls_field y_bytes)
                          (bytes_to_kzg_proof proof_bytes)

/**
 * Return the Fiat-Shamir challenge required by the rest of the protocol.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_challenge
 */
compute_challenge: Blob -> KZGCommitment -> BlsFieldElement
compute_challenge blob commitment = result where
    degree_poly = groupBy`{8, 16} `(FIELD_ELEMENTS_PER_BLOB)
    commitment_bytes = groupBy`{8} commitment
    data = FIAT_SHAMIR_PROTOCOL_DOMAIN # degree_poly # blob # commitment_bytes
    result = hash_to_bls_field data

/**
 * Given a blob, return the KZG proof that is used to verify it against the commitment.
 * This method does not verify that the commitment is correct with respect to `blob`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#compute_blob_kzg_proof
 */
compute_blob_kzg_proof: Blob -> Bytes48 -> KZGProof
compute_blob_kzg_proof blob commitment_bytes = proof where
    commitment = bytes_to_kzg_commitment commitment_bytes
    polynomial = blob_to_polynomial blob
    evaluation_challenge = compute_challenge blob commitment
    (proof, e) = compute_kzg_proof_impl polynomial evaluation_challenge

/**
 * Given a blob, return the KZG proof that is used to verify it against the commitment.
 * This method does not verify that the commitment is correct with respect to `blob`.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#verify_blob_kzg_proof
 */
verify_blob_kzg_proof: Blob -> Bytes48 -> Bytes48 -> Bit
verify_blob_kzg_proof blob commitment_bytes proof_bytes =
    verify_kzg_proof_impl commitment evaluation_challenge y proof where
        commitment = bytes_to_kzg_commitment commitment_bytes
        polynomial = blob_to_polynomial blob
        evaluation_challenge = compute_challenge blob commitment
        y = evaluate_polynomial_in_evaluation_form polynomial evaluation_challenge
        proof = bytes_to_kzg_proof proof_bytes


/**
 * Verify multiple KZG proofs efficiently.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#verify_kzg_proof_batch
 * Add an additional assumption that k is represented with 64 bits.
 * This additional assumption is required by compute_powers
 */
verify_kzg_proof_batch : {k} (fin k, 64 >= width k) => [k]KZGCommitment -> [k]BlsFieldElement -> [k]BlsFieldElement -> [k]KZGProof -> Bit
verify_kzg_proof_batch commitments zs ys proofs = pairing_check points where
    degree_poly = groupBy`{8, 8} `(FIELD_ELEMENTS_PER_BLOB)
    num_commitments = groupBy`{8, 8} `(k)
    data_1 = RANDOM_CHALLENGE_KZG_BATCH_DOMAIN # degree_poly # num_commitments
    data_2 = [ c # z # y # p | c <- commitments | z <- zs | y <- ys | p <- proofs ]
    data = data_1 # (groupBy`{8} (join data_2))
    r = hash_to_bls_field data
    r_powers = compute_powers`{k} r 
    proof_lincomb = g1_lincomb proofs r_powers
    proof_z_lincomb = g1_lincomb proofs ([z * r_power | z <- zs | r_power <- r_powers])
    C_minus_ys = [ g1_add (bytes48_to_G1 commitment) (g1_multi G1 ((`(BLS_MODULUS) - y) % `(BLS_MODULUS))) 
                    | commitment <- commitments | y <- ys ] 
    C_minus_y_as_KZGCommitments = [ g1_to_bytes48 x | x <- C_minus_ys ]
    C_minus_y_lincomb = g1_lincomb C_minus_y_as_KZGCommitments r_powers
    points = [((bytes48_to_G1 proof_lincomb), (g2_negate (bytes96_to_G2 (KZG_SETUP_G2_MONOMIAL@1)))),
                            ((g1_add (bytes48_to_G1 C_minus_y_lincomb) (bytes48_to_G1 proof_z_lincomb)), G2)]

/**
 * Given a list of blobs and blob KZG proofs, verify that they correspond to the provided commitments.
 * Will return True if there are zero blobs/commitments/proofs.
 * @see https://github.com/ethereum/consensus-specs/blob/dev/specs/deneb/polynomial-commitments.md#verify_blob_kzg_proof_batch
 * The input parameters are required to have the same length `k` and `k` is represented with 64 bits.
 * The second assumption is also required by `verify_kzg_proof_batch`.
 */
verify_blob_kzg_proof_batch : {k} (fin k, 64 >= width k) => [k]Blob -> [k]Bytes48 -> [k]Bytes48 -> Bit
verify_blob_kzg_proof_batch blobs commitments_bytes proofs_bytes = verify_kzg_proof_batch commitments evaluation_challenges ys proofs where
    commitments = map bytes_to_kzg_commitment commitments_bytes
    polynomials = map blob_to_polynomial blobs 
    evaluation_challenges = [ compute_challenge blob commitment | blob <- blobs | commitment <- commitments ] 
    ys = [ evaluate_polynomial_in_evaluation_form polynomial evaluation_challenge | polynomial <- polynomials | evaluation_challenge <- evaluation_challenges ]
    proofs = [ bytes_to_kzg_proof proof_bytes | proof_bytes <- proofs_bytes]

/*
 * ======================
 * Test Vector Generators
 * ======================
 */

/**
 * This function is used to generate a random, but valid data `Blob`.
 */
valid_blob_generator : Blob -> Blob
valid_blob_generator blob = assert (blob != blob') "error" blob' where
    x = [bytes | bytes <- (groupBy`{BYTES_PER_FIELD_ELEMENT} blob)]
    y = map (\b -> (join b)) x
    y' = map (\b -> b % `BLS_MODULUS) y
    x' = [groupBy`{8} poly | poly <- y']
    blob' = join x'

/**
 * This function is used to generate a random, valid Z bytes.
 */
z_bytes_generator : Bytes32 -> Bytes32
z_bytes_generator z = z
