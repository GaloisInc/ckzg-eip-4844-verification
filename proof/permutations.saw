enable_experimental;

Permutations <- cryptol_load "../spec/Permutations.cry";

let z3_solver = w4_unint_z3;

let uint64_t = llvm_int 64;

let setup_tuple (type : LLVMType) (name : String) = do {
  cfvTerm <- llvm_fresh_var name type;
  let setupVal = llvm_term cfvTerm;
  return (setupVal, cfvTerm);
};

m <- llvm_load_module "bitcode/ckzg.bc";

// Prove that the following are equivalent:
//  1) C function: `is_power_of_two`
//     See: https://github.com/ethereum/c-kzg-4844/blob/main/src/common/utils.c#L35
//  2) Cryptol spec: `reverse_bits_limited`
//     See: ../spec/Permutations.cry#L15
let is_power_of_two_ok = do {
    (vimpl, vspec) <- (setup_tuple uint64_t "v");
    llvm_precond {{ vspec >= 1 }};
    llvm_execute_func[vimpl];
    llvm_return (llvm_term {{ Permutations::is_power_of_two (vspec) }});
};

llvm_verify m "is_power_of_two" [] true is_power_of_two_ok (z3_solver []);

// Prove that the following are equivalent:
//  1) C function: `reverse_bits`
//     See: https://github.com/ethereum/c-kzg-4844/blob/main/src/common/utils.c#L64
//  2) Cryptol spec: built in `reverse`
//     See: https://github.com/GaloisInc/cryptol/blob/master/lib/Cryptol.cry#L825C11-L825C18
let reverse_bits_ok = do {
    (vimpl, vspec) <- (setup_tuple uint64_t "v");
    llvm_execute_func[vimpl];
    llvm_return (llvm_term {{ reverse (vspec) }});
};

reverse_bits_ov <- llvm_verify m "reverse_bits" [] true reverse_bits_ok (z3_solver []);

// Prove that the following are equivalent:
//  1) C function: `reverse_bits_limited`
//     See: https://github.com/ethereum/c-kzg-4844/blob/main/src/common/utils.c#L84
//  2) Cryptol spec: `reverse_bits_limited`
//     See: ../spec/Permutations.cry#L39
let reverse_bits_limited_ok = do {
    (vimpl, vspec) <- (setup_tuple uint64_t "v");
    (oimpl, ospec) <- (setup_tuple uint64_t "order");
    llvm_precond {{ Permutations::is_power_of_two_bit (ospec)}};
    llvm_precond {{ (ospec > 1) }};
    llvm_execute_func[oimpl, vimpl];
    llvm_return (llvm_term {{ Permutations::reverse_bits_limited (ospec) (vspec) }});
};

llvm_verify m "reverse_bits_limited" [reverse_bits_ov] true reverse_bits_limited_ok (z3_solver []);
